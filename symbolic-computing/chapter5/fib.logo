to addup :list
  if emptyp :list [output 0]
  if emptyp butfirst :list [output first :list]
  if (first :list) < (first butfirst :list) ~
    [output sum ((first butfirst :list) - (first :list)) addup butfirst butfirst :list]
  output sum first :list addup butfirst :list


to demo.error 
  print first :nonesuch


to diamond :word
  diamond.top :word
  diamond.bottom :word
end

to diamond.bottom :word
  diamond.bottom.sub :word 0
end

to diamond.bottom.sub :word :spaces
  repeat :spaces [type "| |]
  print :word
  if equalp count :word 1 [stop]
  diamond.bottom.sub butlast butfirst :word :spaces+1
end

to diamond.top :word
  diamond.top.sub butfirst butlast :word 1
end

to diamond.top.sub :word :spaces
  if equalp count :word 1 [repeat :spaces [type "| |] print first :word stop]
  diamond.top.sub butlast butfirst :word :spaces+1
  repeat :spaces [type "| |]
  print :word
end

to digit :digit
  output lookup :digit [[I 1] [V 5] [X 10] [L 50] [C 100] [D 500] [M 1000 ]]
end

to evenp :number
  output equalp remainder :number 2 0
end

to fib :n
  output (cascade :n [?1 + ?2] 1 [?1] 0)


to lookup :word :dictionary
  if emptyp :dictionary [output "]
  if equalp :word first first :dictionary [output last first :dictionary]
  output lookup :word butfirst :dictionary
end

to oddp :number
  output not equalp remainder :number 2 0
end

to raise :base :exponent
  output cascade :exponent [? * :base] 1


to range :from :to
  output cascade :to-:from [sentence ? (1+last ?)] (sentence :from)


to roman.to.arabic :number
  output addup map.se "digit :number
end

to say :word
  for [row 1 7] ~
    [foreach :word [sayrow :row ?] print []]
  print []
end

to sayrow :row :letter
  type item :row thing :letter
  type "|  |
end

to second :thing
  output first butfirst :thing


to swap :list
  if emptyp :list [print [Swap does not empty the empty input] stop]
  if equalp count :list 1 [print [Swap does not like the singleton input] stop]
  output list second :list first :list
end

Make "a [|  *  | | * * | |*   *| |*****| |*   *| |*   *| |*   *|]
Make "b [|*****| |*   *| |*   *| |**** | |*   *| |*   *| |*****|]
Make "i [|*****| |  *  | |  *  | |  *  | |  *  | |  *  | |*****|]
Make "m [|*   *| |** **| |* * *| |* * *| |*   *| |*   *| |*   *|]
Make "n [|*   *| |**  *| |**  *| |* * *| |*  **| |*  **| |*   *|]
Make "r [|*****| |*   *| |*   *| |*****| |*  * | |*  * | |*   *|]
Make "t [|*****| |  *  | |  *  | |  *  | |  *  | |  *  | |  *  |]
Make "y [|*   *| | * * | |  *  | |  *  | |  *  | |  *  | |  *  |]
